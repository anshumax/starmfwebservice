package dev.anshumax.bsestarmf.mforder;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.2.7
 * 2018-12-05T12:44:54.328+05:30
 * Generated source version: 3.2.7
 *
 */
@WebServiceClient(name = "MFOrder",
                  wsdlLocation = "https://www.bsestarmf.in/MFOrderEntry/MFOrder.svc?wsdl",
                  targetNamespace = "http://tempuri.org/")
public class MFOrder extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "MFOrder");
    public final static QName WSHttpBindingMFOrderEntry = new QName("http://tempuri.org/", "WSHttpBinding_MFOrderEntry");
    public final static QName WSHttpBindingMFOrderEntry1 = new QName("http://tempuri.org/", "WSHttpBinding_MFOrderEntry1");
    static {
        URL url = null;
        try {
            url = new URL("https://www.bsestarmf.in/MFOrderEntry/MFOrder.svc?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(MFOrder.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "https://www.bsestarmf.in/MFOrderEntry/MFOrder.svc?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public MFOrder(String url) throws MalformedURLException {
    	super(new URL(url + "/MFOrderEntry/MFOrder.svc?wsdl"), SERVICE);
    	
    }
    public MFOrder(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MFOrder(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MFOrder() {
        super(WSDL_LOCATION, SERVICE);
    }

    public MFOrder(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public MFOrder(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public MFOrder(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns MFOrderEntry
     */
    @WebEndpoint(name = "WSHttpBinding_MFOrderEntry")
    public MFOrderEntry getWSHttpBindingMFOrderEntry() {
        return super.getPort(WSHttpBindingMFOrderEntry, MFOrderEntry.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MFOrderEntry
     */
    @WebEndpoint(name = "WSHttpBinding_MFOrderEntry")
    public MFOrderEntry getWSHttpBindingMFOrderEntry(WebServiceFeature... features) {
        return super.getPort(WSHttpBindingMFOrderEntry, MFOrderEntry.class, features);
    }


    /**
     *
     * @return
     *     returns MFOrderEntry
     */
    @WebEndpoint(name = "WSHttpBinding_MFOrderEntry1")
    public MFOrderEntry getWSHttpBindingMFOrderEntry1() {
        return super.getPort(WSHttpBindingMFOrderEntry1, MFOrderEntry.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MFOrderEntry
     */
    @WebEndpoint(name = "WSHttpBinding_MFOrderEntry1")
    public MFOrderEntry getWSHttpBindingMFOrderEntry1(WebServiceFeature... features) {
        return super.getPort(WSHttpBindingMFOrderEntry1, MFOrderEntry.class, features);
    }

}
